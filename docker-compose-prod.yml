services:
  postgresql:
    image: postgres:16
    container_name: postgresql_p10
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_p10:/var/lib/postgresql/data
    networks:
      - web

  frontend:
    build:
      context: .
      dockerfile: ./docker/front/Dockerfile.prod
    container_name: frontend_P10
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL}
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL}
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`grineasy.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - web

  backend:
    build:
      context: .
      dockerfile: ./docker/back/Dockerfile.prod
    container_name: backend_P10
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:${DB_PASSWORD}@postgresql:5432/postgres
      CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_SIGNING_KEY: ${CLERK_SIGNING_KEY}
      PORT: 4500
    ports:
      - "4500:4500"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`grineasy.com`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
    networks:
      - web
    depends_on:
      - postgresql

  traefik:
    image: traefik:v3.2.1
    container_name: traefik_reverse_proxy
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      # Activation du /ping pour le healthcheck
      - "--ping=true"
      - "--ping.entrypoint=web"
      # Activation des logs
      - "--log=true"
      - "--log.level=DEBUG"
      # Activation des access logs au format json
      - "--accesslog=true"
      - "--accesslog.format=json"
      # On ne garde que les erreurs et on log les headers
      - "--accesslog.filters.statuscodes=400-499,500-599"
      - "--accesslog.fields.headers.defaultMode=keep"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=remi.moul@my-digital-school.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - web

volumes:
  postgres_data_p10:
    driver: local

networks:
  web:
    external: true
