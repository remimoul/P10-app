services:
  frontend:
    build:
      context: .
      dockerfile: ./docker/front/Dockerfile.prod
    container_name: frontend2_P10
    environment:
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL}
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL}
      NEXT_PUBLIC_BACKEND_URL: https://grineasy.online
    ports:
      - "3000:3000"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www.grineasy.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - web

  backend:
    build:
      context: .
      dockerfile: ./docker/back/Dockerfile.prod
    container_name: backend2_P10
    environment:
      DATABASE_URL: postgresql://f10db_owner:${PASSWORD_NEON}@ep-winter-night-a55b4nyo-pooler.us-east-2.aws.neon.tech:5432/f10db
      CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_SIGNING_KEY: ${CLERK_SIGNING_KEY}
      PORT: 4500
      CORS_FRONTEND_URL: https://grineasy.com
    restart: always
    ports:
      - "4500:4500"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`grineasy.online`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
    networks:
      - web

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_p10_prod
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.listen-address=:9090"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    restart: always
    environment:
      - TZ=Europe/Paris
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - web

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_p10_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
    ports:
      - "3001:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`vps108098.serveur-vps.net`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - web

  traefik:
    image: traefik:v3.2.1
    container_name: traefik_reverse_proxy
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      # Activation du /ping pour le healthcheck
      - "--ping=true"
      - "--ping.entrypoint=web"
      # Activation des logs
      - "--log=true"
      - "--log.level=DEBUG"
      # Activation des access logs au format json
      - "--accesslog=true"
      - "--accesslog.format=json"
      # On ne garde que les erreurs et on log les headers
      - "--accesslog.filters.statuscodes=400-499,500-599"
      - "--accesslog.fields.headers.defaultMode=keep"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=carole.bouche@my-digital-school.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - web

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  web:
    external: true
